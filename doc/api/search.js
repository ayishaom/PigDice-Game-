window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "dice", "modulename": "dice", "kind": "module", "doc": "<p>Dice module for the Pig game.</p>\n\n<p>This module defines the Dice class, which represents a single die used\nin the Pig game. The class includes logic for rolling the die, storing\nits current value, and changing the number of sides.</p>\n"}, {"fullname": "dice.Dice", "modulename": "dice", "qualname": "Dice", "kind": "class", "doc": "<p>A single die used in the Pig game.</p>\n\n<p>Attributes:\n    sides (int): Number of sides on the die.\n    current_value (int | None): Last rolled value or None if not rolled\n    yet.</p>\n"}, {"fullname": "dice.Dice.__init__", "modulename": "dice", "qualname": "Dice.__init__", "kind": "function", "doc": "<p>Initialize a die with a given number of sides.</p>\n\n<p>Args:\n    sides (int, optional): Number of sides for the die. Defaults to 6.</p>\n\n<p>Raises:\n    ValueError: If sides is not an integer &gt;= 2.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sides</span><span class=\"o\">=</span><span class=\"mi\">6</span></span>)</span>"}, {"fullname": "dice.Dice.sides", "modulename": "dice", "qualname": "Dice.sides", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dice.Dice.current_value", "modulename": "dice", "qualname": "Dice.current_value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dice.Dice.roll", "modulename": "dice", "qualname": "Dice.roll", "kind": "function", "doc": "<p>Roll the die and return a random number between 1 and sides.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dice.Dice.get_current_value", "modulename": "dice", "qualname": "Dice.get_current_value", "kind": "function", "doc": "<p>Return the last rolled value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dice.Dice.set_sides", "modulename": "dice", "qualname": "Dice.set_sides", "kind": "function", "doc": "<p>Change the number of sides for the die.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_sides</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dice.Dice.get_sides", "modulename": "dice", "qualname": "Dice.get_sides", "kind": "function", "doc": "<p>Return the number of sides.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "diceHand", "modulename": "diceHand", "kind": "module", "doc": "<p>DiceHand module.</p>\n\n<p>Group of dice that can be rolled together.\nHandles multiple dice, stores their values, and provides\nhelper methods such as total sum, checking if any die shows 1,\nand detecting doubles (for variants of the Pig game).</p>\n"}, {"fullname": "diceHand.DiceHand", "modulename": "diceHand", "qualname": "DiceHand", "kind": "class", "doc": "<p>Represents a group of dice that can be rolled together.</p>\n\n<p>Attributes:\n    dice (List[Dice]): List of Dice objects in the hand.\n    values (List[int]): Last rolled values of all dice.</p>\n"}, {"fullname": "diceHand.DiceHand.__init__", "modulename": "diceHand", "qualname": "DiceHand.__init__", "kind": "function", "doc": "<p>Initialize a hand with N dice.</p>\n\n<p>Args:\n    num_dice (int, optional): Number of dice in the hand. Defaults to\n    1.\n    sides (int, optional): Number of sides on each die. Defaults to 6.</p>\n\n<p>Raises:\n    ValueError: If num_dice is less than 1.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_dice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">sides</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">6</span></span>)</span>"}, {"fullname": "diceHand.DiceHand.dice", "modulename": "diceHand", "qualname": "DiceHand.dice", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[dice.Dice]"}, {"fullname": "diceHand.DiceHand.values", "modulename": "diceHand", "qualname": "DiceHand.values", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[int]"}, {"fullname": "diceHand.DiceHand.roll", "modulename": "diceHand", "qualname": "DiceHand.roll", "kind": "function", "doc": "<p>Roll all dice in the hand and return their values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "diceHand.DiceHand.total", "modulename": "diceHand", "qualname": "DiceHand.total", "kind": "function", "doc": "<p>Return the sum of the most recent roll.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "diceHand.DiceHand.any_one", "modulename": "diceHand", "qualname": "DiceHand.any_one", "kind": "function", "doc": "<p>Return True if any die rolled a 1.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "diceHand.DiceHand.double_ones", "modulename": "diceHand", "qualname": "DiceHand.double_ones", "kind": "function", "doc": "<p>Return True if two or more dice rolled a 1.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "game", "modulename": "game", "kind": "module", "doc": "<p>Game module.</p>\n\n<p>Defines the Game class for managing the full game.\nHandles two players, turn logic, dice rolls, AI decisions, and score tracking.</p>\n"}, {"fullname": "game.DICE_FACE_BASE", "modulename": "game", "qualname": "DICE_FACE_BASE", "kind": "variable", "doc": "<p></p>\n", "default_value": "9856"}, {"fullname": "game.dice_face", "modulename": "game", "qualname": "dice_face", "kind": "function", "doc": "<p>Return a Unicode character representing a dice face for numbers 1-6.</p>\n\n<p>Args:\n    n (int): Number rolled on the dice.</p>\n\n<p>Returns:\n    str: Unicode \u2680\u2013\u2685 for 1\u20136, or str(n) if out of range.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "game.PigGame", "modulename": "game", "qualname": "PigGame", "kind": "class", "doc": "<p>Main class for managing a Pig dice game.</p>\n\n<p>Attributes:\n    players (List[Player]): List of two players in the game.\n    score_manager (Score): Score tracking manager.\n    winning_score (int): Score required to win the game.\n    dice_hand (DiceHand): Dice hand used for rolls.\n    ai_agent (Intelligence): Optional AI agent for computer player.\n    current_index (int): Index of the current player (0 or 1).\n    turn_total (int): Accumulated score in the current turn.\n    running (bool): Whether the game loop is active.</p>\n"}, {"fullname": "game.PigGame.__init__", "modulename": "game", "qualname": "PigGame.__init__", "kind": "function", "doc": "<p>Initialize a PigGame instance.</p>\n\n<p>Args:\n    players (List[Player]): Two players for the game.\n    score_manager (Score): Score tracking manager.\n    winning_score (int, optional): Points needed to win. Defaults to\n    100.\n    dice_hand (Optional[DiceHand], optional): Dice hand to use.\n    Defaults to None.\n    ai_agent (Optional[Intelligence], optional): AI agent for computer\n    player. Defaults to None.</p>\n\n<p>Raises:\n    ValueError: If <code>players</code> does not contain exactly two players.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">players</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">score_manager</span><span class=\"p\">:</span> <span class=\"n\">score</span><span class=\"o\">.</span><span class=\"n\">Score</span>,</span><span class=\"param\">\t<span class=\"n\">winning_score</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">dice_hand</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">diceHand</span><span class=\"o\">.</span><span class=\"n\">DiceHand</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ai_agent</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">intelligence</span><span class=\"o\">.</span><span class=\"n\">Intelligence</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "game.PigGame.players", "modulename": "game", "qualname": "PigGame.players", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game.PigGame.score_manager", "modulename": "game", "qualname": "PigGame.score_manager", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game.PigGame.winning_score", "modulename": "game", "qualname": "PigGame.winning_score", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game.PigGame.dice_hand", "modulename": "game", "qualname": "PigGame.dice_hand", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game.PigGame.ai_agent", "modulename": "game", "qualname": "PigGame.ai_agent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game.PigGame.current_index", "modulename": "game", "qualname": "PigGame.current_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game.PigGame.turn_total", "modulename": "game", "qualname": "PigGame.turn_total", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game.PigGame.running", "modulename": "game", "qualname": "PigGame.running", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game.PigGame.show_board", "modulename": "game", "qualname": "PigGame.show_board", "kind": "function", "doc": "<p>Display the current game board with player scores and icons.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "game.PigGame.play", "modulename": "game", "qualname": "PigGame.play", "kind": "function", "doc": "<p>Run the main game loop until a player wins or quits.</p>\n\n<p>Handles turn switching, rolling, holding, cheating, AI decisions, and\nscore updates.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "histogram", "modulename": "histogram", "kind": "module", "doc": "<p>Histogram module.</p>\n\n<p>Provides the Histogram class for generating text-based histograms\nfor player scores in the Pig game.</p>\n"}, {"fullname": "histogram.Histogram", "modulename": "histogram", "qualname": "Histogram", "kind": "class", "doc": "<p>Generate text-based histograms for player scores.</p>\n"}, {"fullname": "histogram.Histogram.__init__", "modulename": "histogram", "qualname": "Histogram.__init__", "kind": "function", "doc": "<p>Initialize histogram.</p>\n\n<p>Args:\n    scale (int): scale factor for bar length (1 unit = scale points)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, {"fullname": "histogram.Histogram.scale", "modulename": "histogram", "qualname": "Histogram.scale", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "histogram.Histogram.generate_total", "modulename": "histogram", "qualname": "Histogram.generate_total", "kind": "function", "doc": "<p>Generate histogram for total points per player.</p>\n\n<p>Args:\n    players_scores (list of tuples): [(player_name, stats_dict), ...]</p>\n\n<p>Returns:\n    list of str: Lines representing the histogram.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">players_scores</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "histogram.Histogram.generate_per_game", "modulename": "histogram", "qualname": "Histogram.generate_per_game", "kind": "function", "doc": "<p>Generate histogram showing each game for each player.</p>\n\n<p>Args:\n    players_scores (list of tuples): [(player_name, stats_dict), ...]</p>\n\n<p>Returns:\n    list of str: Lines representing the histogram per game.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">players_scores</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "histogram.Histogram.key", "modulename": "histogram", "qualname": "Histogram.key", "kind": "function", "doc": "<p>Return a simple key/legend for the histogram.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "intelligence", "modulename": "intelligence", "kind": "module", "doc": "<p>Intelligence module.</p>\n\n<p>Advanced AI decision logic for the Pig dice game.\nGiven the computer's total score, the opponent's score,\nand the current turn total, it returns a decision: 'roll' or 'hold'.</p>\n\n<p>Implements different difficulty levels:</p>\n\n<ul>\n<li>Easy: Conservative, holds early.</li>\n<li>Medium: Balanced.</li>\n<li>Hard: Strategic and adaptive \u2014 considers probability, score difference,\nopponent proximity to winning, and expected gain from rolling again.</li>\n</ul>\n\n<p>Deterministic and testable; no randomness or I/O.</p>\n"}, {"fullname": "intelligence.Intelligence", "modulename": "intelligence", "qualname": "Intelligence", "kind": "class", "doc": "<p>Represents AI decision-making for the Pig dice game.</p>\n"}, {"fullname": "intelligence.Intelligence.__init__", "modulename": "intelligence", "qualname": "Intelligence.__init__", "kind": "function", "doc": "<p>Initialize the AI with a hold threshold and difficulty level.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>hold_threshold : int\n    The base turn total at which the AI decides to hold (default = 20).\ndifficulty : str\n    Difficulty level: 'easy', 'medium', or 'hard' (default = 'medium').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hold_threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>, </span><span class=\"param\"><span class=\"n\">difficulty</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;medium&#39;</span></span>)</span>"}, {"fullname": "intelligence.Intelligence.hold_threshold", "modulename": "intelligence", "qualname": "Intelligence.hold_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "intelligence.Intelligence.difficulty", "modulename": "intelligence", "qualname": "Intelligence.difficulty", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "intelligence.Intelligence.set_difficulty", "modulename": "intelligence", "qualname": "Intelligence.set_difficulty", "kind": "function", "doc": "<p>Adjust AI behavior based on the selected difficulty level.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>level : str\n    Difficulty level: 'easy', 'medium', or 'hard'.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If an invalid difficulty level is provided.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "intelligence.Intelligence.decide", "modulename": "intelligence", "qualname": "Intelligence.decide", "kind": "function", "doc": "<p>Decide whether to 'roll' or 'hold' based on game state.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>turn_total : int\n    Points accumulated in the current turn.\nmy_score : int\n    AI's total score so far.\nopponent_score : int\n    Opponent's total score.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>str\n    'roll' or 'hold'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">turn_total</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">my_score</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">opponent_score</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "main", "modulename": "main", "kind": "module", "doc": "<p>Main entry point for the Pig game.</p>\n\n<p>Runs the game menu.</p>\n"}, {"fullname": "main.main", "modulename": "main", "qualname": "main", "kind": "function", "doc": "<p>Run the game menu.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "menu", "modulename": "menu", "kind": "module", "doc": "<p>Menu system for the Pig game.</p>\n\n<p>Handles game start, player setup, high scores, rules, and user input.</p>\n"}, {"fullname": "menu.Menu", "modulename": "menu", "qualname": "Menu", "kind": "class", "doc": "<p>Main menu interface for the Pig dice game.</p>\n\n<p>Handles menu display, input validation, and launching single- or\ntwo-player games, as well as showing high scores and rules.</p>\n"}, {"fullname": "menu.Menu.__init__", "modulename": "menu", "qualname": "Menu.__init__", "kind": "function", "doc": "<p>Initialize the menu state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "menu.Menu.running", "modulename": "menu", "qualname": "Menu.running", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "menu.Menu.run", "modulename": "menu", "qualname": "Menu.run", "kind": "function", "doc": "<p>Run the main menu loop until the user chooses to quit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "menu.Menu.display_options", "modulename": "menu", "qualname": "Menu.display_options", "kind": "function", "doc": "<p>Display the main menu options to the user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "menu.Menu.handle_choice", "modulename": "menu", "qualname": "Menu.handle_choice", "kind": "function", "doc": "<p>Handle the user's menu selection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">choice</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "menu.Menu.start_single_player", "modulename": "menu", "qualname": "Menu.start_single_player", "kind": "function", "doc": "<p>Start a game vs computer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "menu.Menu.start_two_player", "modulename": "menu", "qualname": "Menu.start_two_player", "kind": "function", "doc": "<p>Start a two-player local game.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "menu.Menu.show_high_scores", "modulename": "menu", "qualname": "Menu.show_high_scores", "kind": "function", "doc": "<p>Display high scores and histogram of player totals.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "menu.Menu.show_rules", "modulename": "menu", "qualname": "Menu.show_rules", "kind": "function", "doc": "<p>Display the rules of the Pig dice game to the user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "player", "modulename": "player", "kind": "module", "doc": "<p>Player class for the Pig game.</p>\n\n<p>Stores player name, total score and whether it is an AI.\nNo printing or input; logic only.</p>\n"}, {"fullname": "player.Player", "modulename": "player", "qualname": "Player", "kind": "class", "doc": "<p>Represents a player in the Pig game.</p>\n"}, {"fullname": "player.Player.__init__", "modulename": "player", "qualname": "Player.__init__", "kind": "function", "doc": "<p>Initialize a player with a name and AI status.</p>\n\n<p>Args:\n    name (str): Player's name.\n    is_ai (bool, optional): Whether the player is AI. Defaults to\n    False.</p>\n\n<p>Raises:\n    ValueError: If <code>name</code> is empty or not a string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">is_ai</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "player.Player.name", "modulename": "player", "qualname": "Player.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "player.Player.is_ai", "modulename": "player", "qualname": "Player.is_ai", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "player.Player.total_score", "modulename": "player", "qualname": "Player.total_score", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "player.Player.get_name", "modulename": "player", "qualname": "Player.get_name", "kind": "function", "doc": "<p>Return the player's name.</p>\n\n<p>Returns:\n    str: Player's name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "player.Player.set_name", "modulename": "player", "qualname": "Player.set_name", "kind": "function", "doc": "<p>Change the player's name.</p>\n\n<p>Args:\n    name (str): New player name.</p>\n\n<p>Raises:\n    ValueError: If <code>name</code> is empty or not a string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "player.Player.get_score", "modulename": "player", "qualname": "Player.get_score", "kind": "function", "doc": "<p>Return the player's total score.</p>\n\n<p>Returns:\n    int: Total score.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "player.Player.set_score", "modulename": "player", "qualname": "Player.set_score", "kind": "function", "doc": "<p>Set the player's total score.</p>\n\n<p>Args:\n    score (int): New total score.</p>\n\n<p>Raises:\n    ValueError: If <code>score</code> is negative or not an integer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">score</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "player.Player.add_score", "modulename": "player", "qualname": "Player.add_score", "kind": "function", "doc": "<p>Add points to the player's total score.</p>\n\n<p>Args:\n    points (int): Points to add.</p>\n\n<p>Raises:\n    ValueError: If <code>points</code> is negative or not an integer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">points</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "player.Player.reset_score", "modulename": "player", "qualname": "Player.reset_score", "kind": "function", "doc": "<p>Reset the player's total score to zero.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "score", "modulename": "score", "kind": "module", "doc": "<p>Score management module for the Pig game.</p>\n\n<p>Handles saving, loading, and updating player scores using a JSON file.\nProvides methods to record games, get high scores, rename players,\nand clear scores.</p>\n"}, {"fullname": "score.Score", "modulename": "score", "qualname": "Score", "kind": "class", "doc": "<p>Manages player scores.</p>\n"}, {"fullname": "score.Score.__init__", "modulename": "score", "qualname": "Score.__init__", "kind": "function", "doc": "<p>Initialize the Score manager.</p>\n\n<p>Args:\n    file_path (str, optional): Path to the JSON file to store scores.\n    Defaults to \"scores.json\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;scores.json&#39;</span></span>)</span>"}, {"fullname": "score.Score.file_path", "modulename": "score", "qualname": "Score.file_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "score.Score.scores", "modulename": "score", "qualname": "Score.scores", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "score.Score.load_scores", "modulename": "score", "qualname": "Score.load_scores", "kind": "function", "doc": "<p>Load scores from file if it exists, else return an empty dict.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "score.Score.save_scores", "modulename": "score", "qualname": "Score.save_scores", "kind": "function", "doc": "<p>Save all scores to JSON file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "score.Score.record_game", "modulename": "score", "qualname": "Score.record_game", "kind": "function", "doc": "<p>Record a single game for a player.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">player_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "score.Score.get_high_scores", "modulename": "score", "qualname": "Score.get_high_scores", "kind": "function", "doc": "<p>Return all players ranked by total points (descending).</p>\n\n<p>Returns:\n    list of tuples: [(player_name, {stats}), ...]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "score.Score.get_player_history", "modulename": "score", "qualname": "Score.get_player_history", "kind": "function", "doc": "<p>Get all recorded games for a player.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "score.Score.rename_player", "modulename": "score", "qualname": "Score.rename_player", "kind": "function", "doc": "<p>Rename a player while keeping all their existing stats.</p>\n\n<p>Returns:\n    bool: True if rename succeeded, False if old_name not found.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">old_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "score.Score.clear_scores", "modulename": "score", "qualname": "Score.clear_scores", "kind": "function", "doc": "<p>Clear all player scores.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "__init__", "modulename": "__init__", "kind": "module", "doc": "<p>Main package for the Pig Dice game project.</p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();